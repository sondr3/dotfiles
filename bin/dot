#!/usr/bin/env python
"""
Overview of how the management works:

- You have a central dotfile configuration, where you can define profiles
  and set context variables that will be used throughout the program.
- Profiles are a collection of `programs`, in the sense that this repo
  is managed in a whole lotta Python file instead of in a bunch of `yml`
  or `json` or other configuration formats.
- A `program` is a Python script extending a base program class that implements
  a way to manage dotfiles, dependencies with system packages or other package
  managers (Cargo, NPM etc).
"""
import argparse

from lib.config import Config
from lib.version import version


def formatter(prog: str):
    return argparse.HelpFormatter(prog, max_help_position=72)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A simple dotfile management tool", formatter_class=formatter)

    parser.add_argument("--verbose", help="Log output verbosely", default=False, action=argparse.BooleanOptionalAction)

    sub_parser = parser.add_subparsers(help="Command to run", dest="action")
    version_parser = sub_parser.add_parser("version", help="Display version")

    help_parser = sub_parser.add_parser("help", help="Display help")
    help_parser.add_argument("command", help="Command to display help for")

    status_parser = sub_parser.add_parser("status", help="Status of dotfiles")

    args = parser.parse_args()

    if not args.action:
        parser.print_help()
        exit(1)

    if args.action == "status":
        config = Config()
        config.read_config()
        print(config)

    if args.action == "version":
        print(version())
        exit(0)

    if args.action == "help":
        cmd = args.command

        if cmd not in sub_parser.choices:
            print("Invalid command, try again")
            exit(1)

        if cmd == "version":
            version_parser.print_help()
            exit(0)
        if cmd == "help":
            help_parser.print_help()
            exit(0)
        if cmd == "status":
            status_parser.print_help()
